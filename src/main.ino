#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bb57fd75-5086-4bfa-bce2-1b00af8951e0

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int pinultrasonic;
  CloudLocation boardGPS;
  bool switchultra;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

const int trigPin = 12;
const int echoPin = 13;

// define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701
int distance; // variable for the distance measurement
long duration;
float distanceCm;
float distanceInch;

volatile bool pinChanged = false;

void setup()
{
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT);  // Sets the echoPin as an Input

  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop()
{
  ArduinoCloud.update();
  // Your code here
  int ultrasonicl = ultrasonic();
  // Serial.print("ultrasonicl : ");
  // Serial.println(ultrasonicl);
  
  pinultrasonic =ultrasonicl;

  if (ultrasonicl > 50){
    stauteultra = "full";
  }else if (ultrasonicl < 50)
  {
    stauteultra = "not full";
  }
  
   
}

int ultrasonic()
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Serial.println(distance);
  delay(100);

  return distance;
}


/*
  Since Ultrasonic is READ_WRITE variable, onUltrasonicChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUltrasonicChange()  {
  // Add your code here to act upon Ultrasonic change
}
/*
  Since Switchultra is READ_WRITE variable, onSwitchultraChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSwitchultraChange()  {
  // Add your code here to act upon Switchultra change
}


/*
  Since Pinultrasonic is READ_WRITE variable, onPinultrasonicChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPinultrasonicChange()  {
  // Add your code here to act upon Pinultrasonic change
}
/*
  Since BoardGPS is READ_WRITE variable, onBoardGPSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBoardGPSChange()  {
  // Add your code here to act upon BoardGPS change
}

void onStauteultraChange(){}